var u=Object.defineProperty;var c=(n,t,e)=>t in n?u(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var l=(n,t,e)=>c(n,typeof t!="symbol"?t+"":t,e);import{d as w}from"./CXUHTjiO.js";class h{constructor(t){l(this,"url");this.url=t}async register(t,e,s){let r=await this.call("/user/register","POST",{hash:t,password:e,key:s.key,signature:s.signature});if(r.status===201)return{jwt:(await r.json()).jwt,redirect:void 0};throw new Error("Error response!"+r.status)}async getUserQuestions(t){let e=await this.call(`/user/${t}`,"GET");if(e.status!==200)throw Error("failed get user question");return(await e.json()).result.questions}async getQuestions(){let t=await this.call("/question","GET");if(t.status!==200)throw Error("failed get questions");let e=await t.json(),s=[];return e.result.questions.forEach(r=>{r.key!==1&&s.push({key:r.key,content:r.content})}),s}async patchUser(t,e,s){const r=[];for(const o of e)r.push({key:o.key,answer:await w(o.content)});if((await this.call(`/user/${t}`,"PATCH",{add:r,delete:s})).status!==200)throw Error("cannot update profile");return!0}async login(t,e){let s=await this.call(`/login/${t}`,"POST",{password:e});if(s.status===401)throw new Error(await s.text());if(s.status!==201)throw new Error("Something went wrong!");let r=await s.json();return{jwt:r.jwt??void 0,redirect:r.redirect}}async getChallenge(t){let e=await this.call(`/login/${t}/challenge`,"GET");if(e.status!==200)throw Error("cannot get challenge!");let s=await e.json();const r=[];return s.result.questions.forEach(a=>{r.push({key:a.key,content:a.content})}),r}async answerChallenge(t,e,s){const r=[];for(const i of e)r.push({key:i.key,answer:await w(i.content)});let a=await this.call(`/login/${t}/answer`,"POST",{answers:r,key:s.key,signature:s.signature});if(a.status===400)throw new Error(await a.text());if(a.status!==201)throw new Error("Something went wrong!");return{jwt:(await a.json()).jwt,redirect:void 0}}async deleteUser(t,e){if((await this.call(`/user/${t}`,"DELETE",{key:e.key,signature:e.signature})).status!==204)throw new Error("Cannot delete!")}async call(t,e,s=null){return await fetch(this.url+t,{method:e,headers:{"Content-Type":"application/json"},body:s?JSON.stringify(s):void 0})}}const g=()=>new h("https://api.rsapba.xyz"),y=!0;export{y as C,g};
